{"version":3,"file":"create-instance-of.umd.js","sources":["../src/create-instance-of.ts"],"sourcesContent":["import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\n/**\n * It returns a the same function received but now It has default values for the configuration parameter. Allowing you to create instances of a function with different configurations without modifying the original function.\n * It takes two parameters some function of SimpleMaskMoney and configuration\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.setMask}\n *\n * @param {<P, R>(param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R} fn - The first must be the function which you will use\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskmoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {<P, R>(param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R} A new function to use with default values\n * \n * @example\n * Here's an example using from cdn with Vanilla JS:\n * ```html\n * <script src=\"\"></script>\n * \n * <input id=\"my-input\" />\n * \n * <script>\n *   const { createInstanceOf, setMask } = SimpleMaskMoney;\n *   const configuration = {\n *     // Your configuration here\n *   };\n *   const setMask = createInstanceOf(setMask, configuration);\n *   const remove = setMask('#my-input'); // Now this method is with the same parameters passed before\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```javascript\n * import { createInstanceOf, setMask } from 'simple-mask-money';\n * const configuration = {\n *   // Your configuration here\n * };\n * const setMask = createInstanceOf(setMask, configuration);\n * const remove = setMask('#my-input'); // Now this method is with the same parameters passed before\n * ```\n */\nfunction createInstanceOf<P, R>(\n  fn: (param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R,\n  configuration: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const instanceOf = (\n    param: P,\n    overwritedConfiguration: OptionalSimpleMaskMoneyConfiguration = {},\n  ) => fn(param, { ...configuration, ...overwritedConfiguration }) as R;\n\n  return instanceOf as typeof fn;\n}\n\nexport default createInstanceOf;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.createInstanceOf} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.createInstanceOf}\n * \n */\nexport type CreateInstanceOfFunction = typeof createInstanceOf;\n"],"names":["fn","configuration","param","overwritedConfiguration","Object","assign"],"mappings":"uPAyCA,SACEA,EACAC,GAOA,MALmB,CACjBC,EACAC,EAAgE,CAAE,IAC/DH,EAAGE,EAAKE,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAOJ,GAAkBE,GAGxC"}