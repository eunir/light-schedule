{"version":3,"file":"set-mask.cjs.js","sources":["../src/get-base-configuration.ts","../src/set-mask.ts"],"sourcesContent":["import type {\n  OptionalSimpleMaskMoneyConfiguration,\n  SimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nconst configuration: SimpleMaskMoneyConfiguration = {\n  allowNegative     : false,\n  negativeSignAfter : false,\n  decimalSeparator  : ',',\n  fixed             : true,\n  fractionDigits    : 2,\n  prefix            : '',\n  suffix            : '',\n  thousandsSeparator: '.',\n  cursor            : 'end',\n  allowEmpty        : false,\n};\n\nfunction getBaseConfiguration(\n  current?: OptionalSimpleMaskMoneyConfiguration\n): SimpleMaskMoneyConfiguration {\n  return Object.assign({ ...configuration }, current);\n}\n\nexport default getBaseConfiguration;\n","import type {\n  HTMLInputElementMasked,\n  OptionalSimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\n\nconst numbers = '0123456789'.split('');\n\n/**\n * It applies a mask to an input element, formatting its value as a currency.\n * It takes an input element and an optional configuration object as parameters.\n * The function listens for keyboard events on the input element and updates its value accordingly.\n * It also handles caret positioning and allows for undoing changes. The function returns a method to remove the mask from the input element.\n *\n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskmoneysetmask | SimpleMaskMoney.setMask}\n *\n * @param {HTMLInputElement | string | null} input - The first can be a QueryCSSSelectorString or an Input\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {() => void} A function to remove the input mask\n *\n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n *\n * <input id=\"my-input\" />\n *\n * <script>\n *     const remove = SimpleMaskMoney.setMask('#my-input');\n *     remove(); // To remove the mask and listeners\n * </script>\n * ```\n *\n * @example\n * Here's an example using from npm to React with CSSSelector:\n * ```jsx\n * import { setMask } from 'simple-mask-money';\n *\n * function InputMoney() {\n *    useEffect(() => setMask('#my-input'), []);\n *\n *    return <input id=\"my-input\" />;\n * }\n * ```\n *\n * @throws {@link ADD_LINK_AQUI}\n * This exception is thrown if the element is not an input.\n */\nfunction setMask(\n  input: HTMLInputElementMasked | HTMLInputElement | string | null,\n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const currentConfiguration = getBaseConfiguration(configuration);\n\n  const {\n    beforeFormat,\n    afterFormat,\n    allowNegative,\n    negativeSignAfter,\n    fractionDigits,\n    decimalSeparator,\n    thousandsSeparator,\n    fixed,\n    prefix,\n    suffix,\n    cursor,\n    allowEmpty,\n  } = currentConfiguration;\n\n  if (typeof document === 'undefined') return () => void 0;\n\n  const element =\n    typeof input === 'string' ? document.querySelector(input) : input ?? null;\n\n  if (element === null) return () => void 0;\n\n  if (!(element instanceof HTMLInputElement))\n    throw new Error('the element must be an input');\n\n  const completer = fixed ? '0' : '_';\n\n  // Change keyboard type to mobile devices\n  if (!element.hasAttribute('inputmode'))\n    element.setAttribute('inputmode', 'numeric');\n\n  const triggerInputChanges = (\n    value: string,\n    caret?: [start: number, end: number]\n  ) => {\n    element.value = value;\n    element.dispatchEvent(new InputEvent('input'));\n    setCaretPosition(caret);\n    lastValue = value;\n    afterFormat?.(value);\n  };\n\n  const firstPositionToNumber = prefix.length;\n  const allowedKeys = [...numbers, 'Backspace', allowNegative ? '-' : ''];\n  const lengthUntilFirstThousandSeparator = 3 + decimalSeparator.length + fractionDigits;\n\n  const addPrefixAndSuffix = (v: string) => `${prefix}${v}${suffix}`;\n  const getLastPositionToNumber = (v?: string) => v?.length ?? element.value.length - suffix.length;\n\n  const caretIsOnPrefix = (n: number) => n < firstPositionToNumber;\n  const caretIsOnSuffix = (n: number) => suffix.length > 0 && n > getLastPositionToNumber();\n\n  const formatToMask = (v: Array<string>, trimExtraDecimals = false, action?: readonly [name: string, parmas: readonly [start: number, length: number, replace?: string]]) => {\n    let actionName: string | undefined;\n    const characteres = [...v];\n    let result = new Array<string>();\n\n    if (action) {\n      [actionName] = action;\n      const [, actionParams] = action;\n      const [start, end] = actionParams;\n\n      // Add or remove characters\n      const characteresRemoved = characteres.splice(...(actionParams as [number, number]));\n\n      // Backspace into decimal separator or thousands separator should remove next character\n      if (actionName === 'remove' && characteresRemoved.length === 1) {\n        const [removed] = characteresRemoved;\n        if (removed === decimalSeparator || removed === thousandsSeparator)\n          characteres.splice(start - 1, end);\n      }\n    }\n\n    let thousandsCounter = lengthUntilFirstThousandSeparator;\n    let decimalSeparatorAdded = false;\n    let completersToRemove = 0;\n    let isNegative = false;\n\n    for (let character; (character = characteres.pop()); ) {\n      if (character === '-') {\n        isNegative = true;\n        continue;\n      }\n\n      if (character === decimalSeparator && decimalSeparatorAdded && trimExtraDecimals) {\n        const startAt = result.indexOf(decimalSeparator);\n        result.splice(startAt, decimalSeparator.length);\n\n        const fractionDigitsNumbers = result.slice(0, fractionDigits);\n\n        if (fractionDigitsNumbers.length < result.length)\n          thousandsCounter += result.length - fractionDigitsNumbers.length;\n\n        result = [\n          decimalSeparator,\n          ...fractionDigitsNumbers,\n        ];\n        decimalSeparatorAdded = true;\n        continue;\n      }\n\n      if (Number.isNaN(Number(character))) continue;\n\n      thousandsCounter -= 1;\n\n      if (character === completer)\n        completersToRemove += 1;\n      else if (character !== decimalSeparator && completersToRemove > 0)\n        completersToRemove = 0;\n\n      if (thousandsCounter === 0) {\n        result.unshift(thousandsSeparator);\n        thousandsCounter = 3;\n      }\n\n      result.unshift(character);\n\n      if (result.length !== fractionDigits || decimalSeparatorAdded) continue;\n\n      result.unshift(decimalSeparator);\n      decimalSeparatorAdded = true;\n    }\n\n    if (completersToRemove !== 0)\n      result.splice(0, completersToRemove);\n\n    if (result.every(v => v === completer) && actionName === 'remove')\n      isNegative = false;\n\n    if (result.length <= fractionDigits)\n      result = [completer, decimalSeparator, result.join('').padStart(fractionDigits, completer)];\n    else if (result.length === fractionDigits + decimalSeparator.length) // ,00\n      result.unshift(completer);\n\n    if (isNegative)\n      result[negativeSignAfter ? 'push' : 'unshift']('-');\n\n    return addPrefixAndSuffix(result.join(''));\n  };\n\n  const setCaretPosition = (force?: [start: number, end?: number]) => {\n    const lastPositionToNumber = getLastPositionToNumber();\n    const positionDefault = [lastPositionToNumber, lastPositionToNumber] as const;\n\n    let position = positionDefault;\n\n    if (cursor === 'move' && force)\n      position = typeof force[1] === 'number'\n        ? [force[0], force[1]] as const\n        : [force[0], force[0]] as const;\n\n    element.setSelectionRange(...position);\n\n    return position;\n  };\n\n  beforeFormat?.(element.value);\n\n  const initialValue = formatToMask(element.value.split(''), true);\n\n  let lastValue = initialValue;\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    beforeFormat?.(element.value);\n    const lastPositionToNumber = getLastPositionToNumber();\n\n    let start = element.selectionStart ?? lastPositionToNumber;\n    let end = element.selectionEnd ?? lastPositionToNumber;\n\n    // Select all\n    if (e.ctrlKey && e.key === 'a') return setCaretPosition([firstPositionToNumber, lastPositionToNumber]);\n\n    // Undo to first value\n    if (e.ctrlKey && e.key === 'z') return triggerInputChanges(initialValue);\n\n    // Allow move caret after or before the prefix or suffix\n    if (cursor === 'move' && (\n      (e.key === 'ArrowLeft' && start > firstPositionToNumber) ||\n      (e.key === 'ArrowRight' && start < lastPositionToNumber)\n    )) return;\n\n    e.preventDefault();\n\n    // Select all\n    if (e.ctrlKey && e.key === 'a') return setCaretPosition([firstPositionToNumber, lastPositionToNumber]);\n\n    // Allow only number\n    if (!allowedKeys.includes(e.key)) return;\n\n    const isBackspace = e.key === 'Backspace';\n\n    if (caretIsOnPrefix(start)) [start, end] = setCaretPosition([firstPositionToNumber]);\n\n    if (caretIsOnSuffix(start)) [start, end] = setCaretPosition([lastPositionToNumber]);\n\n    // No allow erase the prefix\n    if (isBackspace && start === 0) return;\n\n    if (allowEmpty && isBackspace && element.value.length <= prefix.length + 1) {\n      triggerInputChanges(prefix);\n      return;\n    }\n\n    const characteres = element.value.split('');\n\n    const length = Math.abs(end - start);\n    const removeMoreThanOne = length > 0;\n\n    // Define range that should remove\n    const remove =\n      removeMoreThanOne ? ([start, length] as const) : ([start - 1, 1] as const);\n\n    // Define a range to add\n    const add = [start, removeMoreThanOne ? length : 0, e.key] as const;\n\n    const action = isBackspace ? 'remove' : 'add';\n\n    const newValue = formatToMask(characteres, false, [action, ({ add, remove })[action]]);\n\n    if (!isBackspace && lastValue.length < newValue.length && start < getLastPositionToNumber(newValue)) {\n      start += newValue.length - lastValue.length;\n      end += newValue.length - lastValue.length;\n    } else if (isBackspace && lastValue.length > newValue.length && start > firstPositionToNumber) {\n      const characteresRemoved = lastValue.length - newValue.length;\n      start = start - characteresRemoved <= firstPositionToNumber ? firstPositionToNumber : start - characteresRemoved;\n      end = end - characteresRemoved <= firstPositionToNumber ? firstPositionToNumber : end - characteresRemoved;\n    }\n\n    triggerInputChanges(newValue, [start, end]);\n  };\n\n  const onSelectionChange = () => {\n    if (document.activeElement !== element) return;\n\n    const start = element.selectionStart;\n    const end = element.selectionEnd;\n\n    if (typeof start !== 'number' || typeof end !== 'number') return;\n\n    let position: [start: number, end?: number] | undefined;\n\n    const rangeStartOnPrefix = caretIsOnPrefix(start);\n    const rangeStartOnSuffix = caretIsOnSuffix(end);\n\n    const rangeEndOnSuffix = caretIsOnSuffix(start);\n    const rangeEndOnPrefix = caretIsOnPrefix(end);\n\n    if (rangeStartOnPrefix || rangeStartOnSuffix || rangeEndOnPrefix || rangeEndOnSuffix) position = [\n      rangeStartOnPrefix ? firstPositionToNumber : (rangeStartOnSuffix ? getLastPositionToNumber() : start),\n      rangeEndOnPrefix ? firstPositionToNumber : (rangeStartOnSuffix ? getLastPositionToNumber() : end),\n    ];\n\n    // Only set position if is on prefix or suffix\n    if (!position) return;\n\n    setCaretPosition(position);\n  };\n\n  element.addEventListener('keydown', onKeyDown);\n  document.addEventListener('selectionchange', onSelectionChange);\n\n  if (allowEmpty && initialValue === `${prefix}0`) {\n    triggerInputChanges('');\n  } else {\n    triggerInputChanges(initialValue);\n  }\n\n  const removeMask = (): void => {\n    element.removeEventListener('keydown', onKeyDown);\n    document.removeEventListener('selectionchange', onSelectionChange);\n    delete (element as HTMLInputElementMasked).removeMask;\n  };\n\n  Object.defineProperty(element, 'removeMask', {\n    value: removeMask,\n    configurable: true,\n    enumerable: true,\n    writable: true,\n  });\n\n  return removeMask;\n}\n\nexport default setMask;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#SimpleMaskMoney.setMask | SimpleMaskMoney.setMask} method to get more information about this type\n *\n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#SimpleMaskMoney.setMask | SimpleMaskMoney.setMask}\n */\nexport type SetMaskFunction = typeof setMask;\n\n"],"names":["configuration","allowNegative","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","allowEmpty","getBaseConfiguration","current","Object","assign","numbers","split","input","currentConfiguration","beforeFormat","afterFormat","document","element","querySelector","HTMLInputElement","Error","completer","hasAttribute","setAttribute","triggerInputChanges","value","caret","dispatchEvent","InputEvent","setCaretPosition","lastValue","firstPositionToNumber","length","allowedKeys","lengthUntilFirstThousandSeparator","getLastPositionToNumber","v","_a","caretIsOnPrefix","n","caretIsOnSuffix","formatToMask","trimExtraDecimals","action","actionName","characteres","result","Array","actionParams","start","end","characteresRemoved","splice","removed","thousandsCounter","decimalSeparatorAdded","completersToRemove","isNegative","character","pop","startAt","indexOf","fractionDigitsNumbers","slice","Number","isNaN","unshift","every","join","padStart","addPrefixAndSuffix","force","lastPositionToNumber","position","setSelectionRange","initialValue","onKeyDown","e","selectionStart","_b","selectionEnd","ctrlKey","key","preventDefault","includes","isBackspace","Math","abs","removeMoreThanOne","remove","add","newValue","onSelectionChange","activeElement","rangeStartOnPrefix","rangeStartOnSuffix","rangeEndOnSuffix","rangeEndOnPrefix","addEventListener","removeMask","removeEventListener","defineProperty","configurable","enumerable","writable"],"mappings":"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"}