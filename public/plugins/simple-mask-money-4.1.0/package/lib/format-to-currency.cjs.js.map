{"version":3,"file":"format-to-currency.cjs.js","sources":["../src/get-base-configuration.ts","../src/format-to-currency.ts","../src/format-to-number.ts"],"sourcesContent":["import type {\n  OptionalSimpleMaskMoneyConfiguration,\n  SimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nconst configuration: SimpleMaskMoneyConfiguration = {\n  allowNegative     : false,\n  negativeSignAfter : false,\n  decimalSeparator  : ',',\n  fixed             : true,\n  fractionDigits    : 2,\n  prefix            : '',\n  suffix            : '',\n  thousandsSeparator: '.',\n  cursor            : 'end',\n  allowEmpty        : false,\n};\n\nfunction getBaseConfiguration(\n  current?: OptionalSimpleMaskMoneyConfiguration\n): SimpleMaskMoneyConfiguration {\n  return Object.assign({ ...configuration }, current);\n}\n\nexport default getBaseConfiguration;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\nimport formatToNumber from 'src/format-to-number';\n\n/**\n * It formats the input value as a currency string based on the provided configuration and returns the formatted output\n * It takes a number or string value and an optional configuration object as input.\n *\n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency}\n *\n * @param {string | number} value - The first can be a number or string\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {string} A formated string based on the input value and configuration options e.g when receive `0.66` return `$0,66`\n * \n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n * \n * <script>\n *     const value = SimpleMaskMoney.formatToCurrency(666.99, { prefix: '$' });\n *     console.log(value); // \"$666,99\"\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```javascript\n * import { formatToCurrency } from 'simple-mask-money';\n * \n * const value = formatToCurrency(666.99, { prefix: '$' });\n * console.log(value); // \"$666,99\"\n * ```\n */\nfunction formatToCurrency(\n  value: number | string, \n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  \n  const { \n    fixed,\n    prefix, suffix, \n    fractionDigits,\n    thousandsSeparator, decimalSeparator,\n    allowNegative, negativeSignAfter,\n  } = getBaseConfiguration(configuration);\n\n  const completer = fixed ? '0' : '_';\n\n  const addPrefixAndSuffix = (v: string) => `${prefix}${v}${suffix}`;\n  const fillDecimals = (v: string) => v.padEnd(fractionDigits, completer);\n  \n  const srtValue = value.toString();\n\n  if (srtValue.length === 0) return addPrefixAndSuffix(`${completer}${decimalSeparator}${fillDecimals('')}`);\n\n  let output = '';\n\n  const isNegative = allowNegative && srtValue.includes('-');\n\n  const numberValue = formatToNumber(value, configuration).toString().replace('-', '');\n\n  const [thousands, decimals] = numberValue.toString().split('.');\n\n  const formatedDecimal = fillDecimals(\n    decimals \n      ? decimals.substring(0, fractionDigits) \n      : ''\n  );\n\n  const thousandGroups = [];\n  \n  for (let i = 0; i < thousands.length; i += 3) \n    thousandGroups.unshift(thousands.substring(thousands.length - i, thousands.length - i - 3));\n  \n  output = `${thousandGroups.join(thousandsSeparator)}${decimalSeparator}${formatedDecimal}`; \n\n  if (isNegative)\n    output = negativeSignAfter ? `${output}-` : `-${output}`;\n\n  return addPrefixAndSuffix(output);\n}\n\nexport default formatToCurrency;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency}\n */\nexport type FormatToCurrencyFunction = typeof formatToCurrency;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\n\n/**\n * It removes any non-numeric characters from the input string and returns a number.\n * It takes a number or string as input.\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n * \n * @param {string | number} value - The first can be a number or string\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {number} A number with any non-numeric characters removed e.g when receive `$0.66` return `0,66`\n * \n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n * \n * <script>\n *     const value = SimpleMaskMoney.formatToNumber('$666,99');\n *     // Before save convert to number\n *     console.log(value); // 666.99\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```jsx\n * import { formatToCurrency } from 'simple-mask-money';\n * \n * const value = formatToNumber('$666,99');\n * // Before save convert to number \n * console.log(value); // 666.99\n * ```\n */\nfunction formatToNumber(\n  value: string | number,\n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const { decimalSeparator, allowNegative } = getBaseConfiguration(configuration);\n\n  const normalizeNumber = (n: number) =>\n    n.toString().replace('.', decimalSeparator);\n\n  const stringIsNumber = (s: string) => {\n    const parsedValue = Number(s);\n    return Number.isNaN(parsedValue) ? s : normalizeNumber(parsedValue);\n  };\n\n  const normalizedValue =\n    typeof value === 'number' ? normalizeNumber(value) : stringIsNumber(value);\n\n  const characteres = normalizedValue.split('');\n  \n  let result = '';\n  \n  const isNegative = allowNegative && characteres.includes('-');\n\n  for (let character; (character = characteres.shift()); ) {\n    if (!Number.isNaN(Number(character))) result += character;\n\n    if (character !== decimalSeparator) continue;\n    result += '.';\n  }\n\n  return parseFloat(`${isNegative ? '-' : '' }${result}`);\n}\n\nexport default formatToNumber;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n */\nexport type FormatToNumberFunction = typeof formatToNumber;\n"],"names":["configuration","allowNegative","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","allowEmpty","getBaseConfiguration","current","Object","assign","value","completer","addPrefixAndSuffix","v","fillDecimals","padEnd","srtValue","toString","length","output","isNegative","includes","numberValue","normalizeNumber","n","replace","characteres","s","parsedValue","Number","isNaN","stringIsNumber","split","result","character","shift","parseFloat","formatToNumber","thousands","decimals","formatedDecimal","substring","thousandGroups","i","unshift","join"],"mappings":"aAKA,MAAMA,EAA8C,CAClDC,eAAoB,EACpBC,mBAAoB,EACpBC,iBAAoB,IACpBC,OAAoB,EACpBC,eAAoB,EACpBC,OAAoB,GACpBC,OAAoB,GACpBC,mBAAoB,IACpBC,OAAoB,MACpBC,YAAoB,GAGtB,SAASC,EACPC,GAEA,OAAOC,OAAOC,OAAMD,OAAAC,OAAA,CAAA,EAAMd,GAAiBY,EAC7C,gBCcA,SACEG,EACAf,GAGA,MAAMI,MACJA,EAAKE,OACLA,EAAMC,OAAEA,EAAMF,eACdA,EAAcG,mBACdA,EAAkBL,iBAAEA,EAAgBF,cACpCA,EAAaC,kBAAEA,GACbS,EAAqBX,GAEnBgB,EAAYZ,EAAQ,IAAM,IAE1Ba,EAAsBC,GAAc,GAAGZ,IAASY,IAAIX,IACpDY,EAAgBD,GAAcA,EAAEE,OAAOf,EAAgBW,GAEvDK,EAAWN,EAAMO,WAEvB,GAAwB,IAApBD,EAASE,OAAc,OAAON,EAAmB,GAAGD,IAAYb,IAAmBgB,EAAa,OAEpG,IAAIK,EAAS,GAEb,MAAMC,EAAaxB,GAAiBoB,EAASK,SAAS,KAEhDC,ECzBR,SACEZ,EACAf,GAEA,MAAMG,iBAAEA,EAAgBF,cAAEA,GAAkBU,EAAqBX,GAE3D4B,EAAmBC,GACvBA,EAAEP,WAAWQ,QAAQ,IAAK3B,GAUtB4B,GAFa,iBAAVhB,EAAqBa,EAAgBb,GANvB,CAACiB,IACtB,MAAMC,EAAcC,OAAOF,GAC3B,OAAOE,OAAOC,MAAMF,GAAeD,EAAIJ,EAAgBK,EAAY,EAIdG,CAAerB,IAElCsB,MAAM,IAE1C,IAAIC,EAAS,GAEb,MAAMb,EAAaxB,GAAiB8B,EAAYL,SAAS,KAEzD,IAAK,IAAIa,EAAYA,EAAYR,EAAYS,SACtCN,OAAOC,MAAMD,OAAOK,MAAaD,GAAUC,GAE5CA,IAAcpC,IAClBmC,GAAU,KAGZ,OAAOG,WAAW,GAAGhB,EAAa,IAAM,KAAMa,IAChD,CDNsBI,CAAe3B,EAAOf,GAAesB,WAAWQ,QAAQ,IAAK,KAE1Ea,EAAWC,GAAYjB,EAAYL,WAAWe,MAAM,KAErDQ,EAAkB1B,EACtByB,EACIA,EAASE,UAAU,EAAGzC,GACtB,IAGA0C,EAAiB,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAUpB,OAAQyB,GAAK,EACzCD,EAAeE,QAAQN,EAAUG,UAAUH,EAAUpB,OAASyB,EAAGL,EAAUpB,OAASyB,EAAI,IAO1F,OALAxB,EAAS,GAAGuB,EAAeG,KAAK1C,KAAsBL,IAAmB0C,IAErEpB,IACFD,EAAStB,EAAoB,GAAGsB,KAAY,IAAIA,KAE3CP,EAAmBO,EAC5B"}