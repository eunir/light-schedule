{"version":3,"file":"format-to-number.esm.js","sources":["../src/get-base-configuration.ts","../src/format-to-number.ts"],"sourcesContent":["import type {\n  OptionalSimpleMaskMoneyConfiguration,\n  SimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nconst configuration: SimpleMaskMoneyConfiguration = {\n  allowNegative     : false,\n  negativeSignAfter : false,\n  decimalSeparator  : ',',\n  fixed             : true,\n  fractionDigits    : 2,\n  prefix            : '',\n  suffix            : '',\n  thousandsSeparator: '.',\n  cursor            : 'end',\n  allowEmpty        : false,\n};\n\nfunction getBaseConfiguration(\n  current?: OptionalSimpleMaskMoneyConfiguration\n): SimpleMaskMoneyConfiguration {\n  return Object.assign({ ...configuration }, current);\n}\n\nexport default getBaseConfiguration;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\n\n/**\n * It removes any non-numeric characters from the input string and returns a number.\n * It takes a number or string as input.\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n * \n * @param {string | number} value - The first can be a number or string\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {number} A number with any non-numeric characters removed e.g when receive `$0.66` return `0,66`\n * \n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n * \n * <script>\n *     const value = SimpleMaskMoney.formatToNumber('$666,99');\n *     // Before save convert to number\n *     console.log(value); // 666.99\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```jsx\n * import { formatToCurrency } from 'simple-mask-money';\n * \n * const value = formatToNumber('$666,99');\n * // Before save convert to number \n * console.log(value); // 666.99\n * ```\n */\nfunction formatToNumber(\n  value: string | number,\n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const { decimalSeparator, allowNegative } = getBaseConfiguration(configuration);\n\n  const normalizeNumber = (n: number) =>\n    n.toString().replace('.', decimalSeparator);\n\n  const stringIsNumber = (s: string) => {\n    const parsedValue = Number(s);\n    return Number.isNaN(parsedValue) ? s : normalizeNumber(parsedValue);\n  };\n\n  const normalizedValue =\n    typeof value === 'number' ? normalizeNumber(value) : stringIsNumber(value);\n\n  const characteres = normalizedValue.split('');\n  \n  let result = '';\n  \n  const isNegative = allowNegative && characteres.includes('-');\n\n  for (let character; (character = characteres.shift()); ) {\n    if (!Number.isNaN(Number(character))) result += character;\n\n    if (character !== decimalSeparator) continue;\n    result += '.';\n  }\n\n  return parseFloat(`${isNegative ? '-' : '' }${result}`);\n}\n\nexport default formatToNumber;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n */\nexport type FormatToNumberFunction = typeof formatToNumber;\n"],"names":["configuration","allowNegative","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","allowEmpty","getBaseConfiguration","current","Object","assign","formatToNumber","value","normalizeNumber","n","toString","replace","characteres","s","parsedValue","Number","isNaN","stringIsNumber","split","result","isNegative","includes","character","shift","parseFloat"],"mappings":"AAKA,MAAMA,EAA8C,CAClDC,eAAoB,EACpBC,mBAAoB,EACpBC,iBAAoB,IACpBC,OAAoB,EACpBC,eAAoB,EACpBC,OAAoB,GACpBC,OAAoB,GACpBC,mBAAoB,IACpBC,OAAoB,MACpBC,YAAoB,GAGtB,SAASC,EACPC,GAEA,OAAOC,OAAOC,OAAMD,OAAAC,OAAA,CAAA,EAAMd,GAAiBY,EAC7C,CCeA,SAASG,EACPC,EACAhB,GAEA,MAAMG,iBAAEA,EAAgBF,cAAEA,GAAkBU,EAAqBX,GAE3DiB,EAAmBC,GACvBA,EAAEC,WAAWC,QAAQ,IAAKjB,GAUtBkB,GAFa,iBAAVL,EAAqBC,EAAgBD,GANvB,CAACM,IACtB,MAAMC,EAAcC,OAAOF,GAC3B,OAAOE,OAAOC,MAAMF,GAAeD,EAAIL,EAAgBM,EAAY,EAIdG,CAAeV,IAElCW,MAAM,IAE1C,IAAIC,EAAS,GAEb,MAAMC,EAAa5B,GAAiBoB,EAAYS,SAAS,KAEzD,IAAK,IAAIC,EAAYA,EAAYV,EAAYW,SACtCR,OAAOC,MAAMD,OAAOO,MAAaH,GAAUG,GAE5CA,IAAc5B,IAClByB,GAAU,KAGZ,OAAOK,WAAW,GAAGJ,EAAa,IAAM,KAAMD,IAChD"}